
/*









/*
##Linear gradient Mixins
 
use this mixin for lienar gradient creation
<br>
.gradient{
<br>	@include linearGradient($topColor, $bottomColor, $baseColor);
<br>	
}
<p>
<br>$topColor: is the color value from the top can be a variables or a #  value
<br>$bottomColor: is the color value at the bottom can be a variables or a #  value<br>
<br>$baseColor: is the backup color for browsers which dont understand CSS3 gradients can be a variables or a #  value<br>

*/

@mixin linearGradient($top, $bottom, $base){
	background-color: $base;	
	background-image: -webkit-gradient(linear,0% 0%, 0% 100%,from($top),to($bottom));
	background-image: -webkit-linear-gradient(top, $top, $bottom); 
	background-image: -moz-linear-gradient(top, $top, $bottom);
  	background-image: -ms-linear-gradient(top, $top, $bottom);    
	background: linear-gradient(top, $bottom);
  
}

/*
#Font Family
-----------------------------------------------------*/

@mixin fontFam($fontFamily){
  font-family:$fontFamily;
}



/*
#Alerts & Messages
-----------------------------------------------------*/

@mixin helpBoxSize($helpBoxWith, $helpBoxHeight) { 
  width:($helpBoxWith *10) + px;
  width:$helpBoxWith + rem;
//  height:($helpBoxHeight *10) + px;
//  height:$helpBoxHeight + rem;
}

/*
##Opactity Mxin

Class is required to hide teh datepicker on load
	
	#ui-datepicker-div { 
		display:none 
	}

*/

@mixin opacity( $value: 0.5 ) {
	opacity: $value;
	
	filter: alpha(opacity= $value * 100 );
	-moz-opacity : $value;
	zoom: 1;
}

/*
## Ellipsis

*/
@mixin ellipsis($textWidth){
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width:($textWidth *10) +px;
  max-width:$textWidth  +rem;
  @extend %inlineBlock;
}


/*
##Date Picker

Class is required to hide teh datepicker on load
	
	#ui-datepicker-div { 
		display:none 
	}

*/



#ui-datepicker-div { 
	display:none 
}
  

/*##Clear elements

Elements to clear floats
to be used like this
	
	<div class="clearFix">This text is cleared</div>

*/

.clear{
	clear:both;
	visibility:hidden;
	height:0px;
	display:block;
}
.clearFix:after{
	clear:both;
	content: ".";
	visibility:hidden;
	width:100%;
	display:block;
	height:0;
	line-height: 0;
}

.clearFix{
    zoom: 1;
}

.clearBoth{
	clear:both;	
}

/* ##Mixins 



*/

/* ###Font size mixin 

<code>
@mixin fontSize($sizeValue){
  	font-size: ($sizeValue * 10) + px;
  	font-size: $sizeValue + rem;
}
</code>
<p>
<strong>Implementation for the mixin:</strong>

<p>
<code>
.someFontSize{
	@include fontSize(2);
}
</code>
<p>

Value can be a numeric value or a variable

*/
@mixin fontSize($sizeValue){
  	font-size: ($sizeValue * 10) + px;
  	font-size: $sizeValue + rem;
}


/* ###Hides text mixin 
<code>
@mixin hideText{
    overflow:hidden;
    text-indent:-9000px;
}
</code>
<p>

<strong>Implementation for the mixin:</strong>

<p>
<code>
.hideThisText{
	@include hideText;
}
</code>
<p>

Can be used if an image is the main visual presentation and text for AA compliance is added.

*/

@mixin hideText{
    overflow:hidden;
    text-indent:-9000px;
}


@mixin allBorders($borderValue,  $borderStyle, $borderColor) {
 	border-color:$borderColor;
 	border-width:$borderValue;
 	border-style:$borderStyle;
}

@mixin firstBorder($borderValue,  $borderStyle, $borderColor){
	border-left: $borderValue  $borderStyle $borderColor;
}

@mixin lastBorder($borderValue, $borderColor, $borderStyle){
	border-right: $borderValue  $borderColor $borderStyle;
}

@mixin endBorder($borderValue, $borderColor, $borderStyle){
	border-bottom: $borderValue  $borderColor $borderStyle;
}

@mixin startBorder($borderValue, $borderColor, $borderStyle){
	border-top: $borderValue  $borderColor $borderStyle;
}


 @mixin borderRadius($borderRadius ...) {
 	-webkit-border-radius: $borderRadius +rem;
 	-moz-border-radius: $borderRadius +rem;
 	border-radius: $borderRadius +rem;
}

@mixin borderTopLeftRadius($borderRadius ...) {
  -webkit-border-top-left-radius: $borderRadius +rem;
  -moz-border-radius-topleft: $borderRadius +rem;
  border-top-left-radius: $borderRadius +rem;
}

@mixin borderTopRightRadius($borderRadius ...) {
  -webkit-border-top-right-radius: $borderRadius +rem;
  -moz-border-radius-topright: $borderRadius +rem;
  border-top-right-radius: $borderRadius +rem;
}

@mixin borderBottomLeftRadius($borderRadius ...) {
  -webkit-border-bottom-left-radius: $borderRadius +rem;
  -moz-border-radius-bottomleft: $borderRadius +rem;
  border-bottom-left-radius: $borderRadius +rem;
}

@mixin borderBottomRightRadius($borderRadius ...) {
  -webkit-border-bottom-right-radius: $borderRadius +rem;
  -moz-border-radius-bottomright: $borderRadius +rem;
  border-bottom-right-radius: $borderRadius +rem;
}



@mixin multiShadow($params) {
  -webkit-box-shadow: $params;
  -moz-box-shadow: $params;
  box-shadow: $params;

}


 @mixin boxShadow($shadows...) {
 	-moz-box-shadow: $shadows;
 	-webkit-box-shadow: $shadows;
 	box-shadow: $shadows;
}


@mixin darkTextShadow($opacity){
    text-shadow:#000000($opacity) 0 2px 0;
}


/* ###Box Sizing Mixin



*/

@mixin boxSizing{
	-webkit-box-sizing: border-box; 
	-moz-box-sizing: border-box;    
	box-sizing: border-box;
}

/* ###Mixin for Positining
Position Mixin is a a function to create a position class for a element on a page
<p>
apply the mixin as like this to a class element which needs to be positioned
<p>
<code>
.positionMe{
@include position(absolute, 0 0 10px 50px);	
}</code>
<p>
<strong>absolute</strong> - defines the position type
<br><strong>0 0 0 0</strong> - defines the position cooridnates (TOP,RIGHT,BOTTOM,LEFT)
<br>px or rem needs to be added for this to execude


*/




@mixin position($position: relative, $coordinates: 0 0 0 0) {

  @if type-of($position) == list {
    $coordinates: $position;
    $position: relative;
  }

  $top: nth($coordinates, 1);
  $right: nth($coordinates, 2);
  $bottom: nth($coordinates, 3);
  $left: nth($coordinates, 4);

  position: $position;

  @if $top == auto {
    top: $top;
  }
  @else if not(unitless($top)) {
    top: $top;
  }

  @if $right == auto {
    right: $right;
  }
  @else if not(unitless($right)) {
    right: $right;
  }

  @if $bottom == auto {
    bottom: $bottom;
  }
  @else if not(unitless($bottom)) {
    bottom: $bottom;
  }

  @if $left == auto {
    left: $left;
  }
  @else if not(unitless($left)) {
    left: $left;
  }
}


/* ###Mixin for Margins and Paddings
setSpace Mixin is a a function to create a margin or padding class for a element on a page
<p>
apply the mixin as like this to a class element which needs to be positioned
<p>
<code>
.setSpace{
@include setSpace(margin, 0 0 10px 50px);
}</code>
<p>
<strong>margin</strong> - defines the space type alternative option is padding
<br><strong>0 0 0 0</strong> - defines the space cooridnates (TOP,RIGHT,BOTTOM,LEFT)
<br>px or rem needs to be added for this to execude


*/

@mixin setSpace($setSpace: padding, $setSpaceValues: 0 0 0 0){
  @if type-of($setSpace) == list{
    $setSpaceValues :$setSpace;
    $setSpace: padding;
  }
  $top: nth($setSpaceValues, 1);
  $right: nth($setSpaceValues, 2);
  $bottom: nth($setSpaceValues, 3);
  $left: nth($setSpaceValues, 4);



  @if $top == auto{
    #{$setSpace}-top: $top;

  }
  @else if not(unitless($top)){
       #{$setSpace}-top: $top;
  }

  @if $right == auto{
    #{$setSpace}-right: $right;
  }
  @else if  not(unitless($right)){
    #{$setSpace}-right: $right;
  }


  @if $bottom == auto{
    #{$setSpace}-bottom: $bottom;
  }
  @else if  not(unitless($bottom)){
    #{$setSpace}-bottom: $bottom;
  }


  @if $left == auto{
    #{$setSpace}-left: $left ;
  }
  @else if  not(unitless($left )){
    #{$setSpace}-left: $left ;
  }

}



/* ###Mixin for Margins and Paddings
setSpace Mixin is a a function to create a margin or padding class for a element on a page
<p>
apply the mixin as like this to a class element which needs to be positioned
<p>
<code>
.setSpace{
@include setSpace(margin, 0 0 10px 50px);
}</code>
<p>
<strong>margin</strong> - defines the space type alternative option is padding
<br><strong>0 0 0 0</strong> - defines the space cooridnates (TOP,RIGHT,BOTTOM,LEFT)
<br>px or rem needs to be added for this to execude


*/

@mixin sizeObject($size) {
  @if length($size) == 1 {
    @if $size == auto {
      width: $size;
      height: $size;
    }

    @else if unitless($size) {
      width: ($size *10) + px;
      height: ($size *10) + px;
      width: $size  + rem;
      height: $size  + rem;
    }

    @else if not(unitless($size)) {
      width: $size;
      height: $size;
    }
  }

  // Width x Height
  @if length($size) == 2 {
    $width: nth($size, 1);
    $height: nth($size, 2);

    @if $width == auto {
      width: $width;
    }
    @else if not(unitless($width)) {
      width: $width;
    }
    @else if unitless($width) {
      width: ($width*10) + px;
      width: $width + rem;
    }

    @if $height == auto {
      height: $height;
    }
    @else if not(unitless($height)) {
      height: $height;
    }
    @else if unitless($height) {
      height: ($height *10) + px;
      height: $height + rem;
    }
  }
}


// Obsolete

 @mixin blockMargin($marginValueTop, $marginValueRight, $marginValueBottom, $marginValueLeft) {
 	margin:($marginValueTop * 10) + px ($marginValueRight * 10) + px ($marginValueBottom * 10) + px ($marginValueLeft * 10) + px;
	margin:$marginValueTop  + rem  $marginValueRight  + rem $marginValueBottom  + rem $marginValueLeft  + rem;

}

 @mixin blockPadding($paddingValueTop, $paddingValueRight, $paddingValueBottom, $paddingValueLeft) {
 	padding:($paddingValueTop * 10) + px ($paddingValueRight * 10) + px ($paddingValueBottom * 10) + px ($paddingValueLeft * 10) + px;
	padding:$paddingValueTop  + rem  $paddingValueRight  + rem $paddingValueBottom  + rem $paddingValueLeft  + rem;

}




 @mixin lineHeight($lineHeight) {
	line-height:($lineHeight *10) + px;
 	line-height:$lineHeight + rem;
}

 @mixin dataCellHeight($dataCellHeight) {
	height:($dataCellHeight *10) + px;
 	height:$dataCellHeight + rem;
}

@mixin width($width){
  width: ($width *10) + px;
  width: $width +rem;

}


/* Mixin for Form Fields */

 @mixin inputField($inputFieldValue) {
		width:($inputFieldValue *10) +px;
		width:$inputFieldValue  +rem;
}


 @mixin ie-gradient($first, $second) {
 	zoom: 1;
 	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$first}', endColorstr='#{$second}');
 	-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$first}', endColorstr='#{$second}');"
}
 @mixin ie-box-shadow($color, $direction, $strength) {
 	zoom: 1;
 	filter: progid:DXImageTransform.Microsoft.shadow(color='#{$color}', Direction='#{$direction}', Strength='#{$strength}');
 	-ms-filter: "progid:DXImageTransform.Microsoft.shadow(color='#{$color}', Direction='#{$direction}', Strength='#{$strength}')";
}



/* ##Borders and Shadows global 

Border and shadow styles using mixins.
*/


/* ###Border radius
Border radius defines if there are round corners <br>

.roundBorderRadius{
<br>
	@include roundBorderRadius(100);<br>
}
<br>

####Example of Code to create a round circle

	<div class="roundBorderRadius allBorder block textCenter" style="width:40px; height:40px; line-height:40px;">Test</div>
	
<br>Style classes is added for example only!

*/

.borderRadius {
 	@include borderRadius(0.4);
}
.roundBorderRadius {
 	@include borderRadius(100);
}
.shadow {
 	@include boxShadow( 0px 2px 3px $beta27);
}

.shadowMod1{
 	@include boxShadow( 0px 2px 3px $beta10);
 	
} 


/* ##Styles


*/


/* ### Float Styles

floatRight and floatLeft classes mostly to be used as sielent or non sielent extent<br>

floatLeft
<br>
floatRight
<br>
floatNone
<br>



.floatLeft {<br>
	@extend %floatLeft;
<br>
}

%floatLeft{<br>
	float:left;
<br>
}
<br>


####Example
.someClass{
<br>
	@extend %floatLeft;	
<br>
}


*/


.floatLeft,
%floatLeft{
	float:left;
}
.floatRight,
%floatRight{
	float:right!important;
}


%floatNone{
	float:none!important;
}

/* ### Text Alignment Mixin

Example of use:

	.someClass{
		@include textAlign(center);
	}

*/


@mixin textAlign($textAlign){
	text-align: $textAlign;
}


/* ### Text Decoration Mixin

Example of use:

	.someClass{
		@include textDeco(underline);
	}

*/


@mixin textDeco($textDeco){
	text-decoration:  $textDeco;
}




/* ### Text Transform Mixin

Example of use:

	.someClass{
		@include textTrans(uppercase);
	}

*/


@mixin textTrans($textTrans){
	text-transform:$textTrans;
}



.verticalMiddle{
	vertical-align:middle;
}

	
/* ##Cursor & noCursor

Creates a cursor class in sielent mode and a class is for direct applying a class to a dive<br>

	<div class="cursor"> Text here will have a cursor when rolled over</div>

	<a class="noCursor" href="#">Cursor will be default</a>

*/	


%cursor {
	cursor: pointer;
}
%noCursor {
	cursor: default !important;
}

.cursor{
	@extend %cursor;
}

.noCursor{
    @extend %noCursor;
    pointer-events: none;
    &:hover{
      @extend %noCursor;
      pointer-events: none; 
    }
}

.defaultCursor {
	cursor: default !important;
}

/* ##Display and hide elements

Creates a curser class in sielent mode and a class is for direct applying a class to a dive<br>

%textIndentOff - ( obsolete will be using mixing to be removed)
<p>
####.hidden

	<div class="hidden floatLeft" style="width:60px;"> Hides this text</div> < --- text element is hidden but still as ablock available


####%block, .block
<p>
Class applied to a HTML element
	
	<div class="block"> This is a block element</div>

<p>

#####Extended %block in silent mode inside a class
Use silent mode for class elements inside the CSS
	
.createBlock{
<br>
	@extend %block;
<br>
}

####%inline, .inline 
<p>
Class applied to a HTML element
	
	<div class="inline"> This class converts a block in to ainline element</div>

<p>

#####Extended %inline in silent mode inside a class
Use silent mode for class elements inside the CSS
<p>	
.createInline{
<br>
	@extend %inline;
<br>


####%inlineBlock, .inlineBlock 
<p>
Class applied to a HTML element
	
	<div class="inlineBlock"> This class converts a block in to inline-block element</div>

<p>

#####Extended %inlineBlock in silent mode inside a class
Use silent mode for class elements inside the CSS
<p>
.createInlineBlock{
<br>
	@extend %inlineBlock;
<br>

*/	 





.ui-loader,
.noDisplay {
	display: none!important;
}
.noShow {
	display: none;
}
.hidden,
%hidden {
	visibility: hidden;
}
%block,
.block {
	display: block;
}

%inline,
.inline {
	display: inline;
}

%inlineBlock,
.inlineBlock{
	display: inline-block;
	vertical-align: baseline;
  	zoom: 1;
  	*display: inline;
  	*vertical-align: auto;
}



/*
##Positioning Styles

####%relative, .relative 
<p>
Class applied to a HTML element
	
	<div class="relative"> This element becomes a relative positon</div>

<p>

#####Extended %relative in silent mode inside a class
Use silent mode for class elements inside the CSS
	
.makeMeRelative{
<br>
	@extend %relative;
<br>


*/
%relative,
.relative {
	position: relative;
}

.absolute {
	position: absolute;
}
.fixed{
	position:fixed;	
}

 
.setLineHeight{
	@include lineHeight(2);
}
.resetLineHeight{
	@include lineHeight(1.5);	
}

.diverterLine{
	border-bottom:$diverterLine;	
	@extend .block;
	float:left;
	width:95%;
}

.noWrap{
	white-space: nowrap;
}
 

a, a:focus, :focus a:hover, a:active, em, p, span, div, th, td {
	outline: 1px;
}
/*a:focus{
    .text{
             background-color: #FFD636;
        }
} */
 input::-moz-focus-inner {
 	border: 1px;
}
.clearBoth {
	clear: both;
}
:focus
{
  outline: none!important;
}
a:focus, input:focus, select:focus, textarea:focus, formBlockContainer :focus, ui-datepicker :focus
{
  outline:1px dotted #fed648 !important;
}

.autoMargin{
	margin:0 auto;	
}
.resetMargin{
	margin:0;	
}
.resetFirstMargin{
	margin-left:0px;
}
.setFirstGutter{
	margin-left:$gutterWidth;
}
.setLastGutter{
	margin-right:$gutterWidth;
}

.setTopGutter{
	margin-top:$gutterWidth;
}
.setBottomGutter{
	margin-bottom:$gutterWidth;
}

.borderButton {
 	border-color:#fff;
	border-style: solid;
	border-width: 1px;
}

/*###Border styles



*/

.startBorder{
	@include startBorder(1px,#ddd,solid);
}

.firstBorder{
	@include firstBorder(1px,#ddd,solid);	
}

.lastBorder{
	@include lastBorder(1px,#ddd,solid);	
}

.endBorder {
	@include endBorder(1px,#ddd,solid);
}

.allBorder{
	@include allBorders(1px,  solid, #ddd);
}


.unSelect {
	-webkit-user-select: none;
	-moz-user-select: none;
	-khtml-user-select: none;
}
%setOverFlow,
.setOverFlow{
	overflow:hidden;
}

/* ##Alignment of Alpha or numeric Values

	<div class="numeric">1234</div>
	
*/

.numeric{
	@extend %floatRight;
	@include textAlign(right);	
}

/*##Mixin for rotation

*/ 

@mixin rotate($rotation){
	-webkit-transform: rotate($rotation +deg);
    -moz-transform: rotate($rotation +deg);
    -ms-transform: rotate($rotation +deg);
    -o-transform: rotate($rotation +deg);
    transform: rotate($rotation +deg);
}


// Form Style With Mixin

@mixin formStyleWith($formStyle){
  width:($formStyle *10) +px;
  width:$formStyle  +rem;
}




%empasis {
	font-weight: bold;
}

body{
  @include fontSize(1.4);
}

// Box Arrows

%arrowBoxDoubleLine{
  border-width:22px;
  top:50%;
  margin-top:-22px;
}

%arrowBoxSingleLine{
  border-width:16px;
  top:50%;
  margin-top:-16px;
}

.arrowBox {
  line-height: 1.2rem;
  &.primaryArrow{
    background-color: $gamma;
      &:after{
        border-color:rgba(0, 149, 200, 0);
        border-left-color:$gamma;
        @extend %arrowBoxDoubleLine;
      }
    &.primaryArrowSingle{
      &:after{
        @extend %arrowBoxSingleLine;
       }
    }
   }
  &.positiveArrow{
    background-color: $zeta;
    &:after{
      border-color:rgba(0, 149, 200, 0);
      border-left-color:$zeta;
      @extend %arrowBoxDoubleLine;
    }
  }
  position:relative;
  height:auto;
  width:auto;
  color:$shi;
  @include fontSize(1.1);
  @include textTrans(uppercase);
  @extend %floatLeft;
  @include blockPadding(1,1,1,1);
  @include blockMargin(0,4,0,0);
}

.arrowBox:after {
  left:100%;
  border:solid transparent;
  content:" ";
  height:0;
  width:0;
  position:absolute;
  pointer-events:none;
}
.arrowBox:after {
   border-width:20px;
  top:50%;
  margin-top:-20px; 
}