#!/bin/bash

set -e

export STACK="${GO_PIPELINE_NAME:-dev-local}-testing"
export JSON_SERVICE_IMAGE=$(cat docker-image.txt)
export SETTINGS_IMAGE=$(cat settings-image.txt)
export ABS_IMAGE=$(cat abs_image.txt)
export ABS_IMAGE=${ABS_IMAGE:-LATEST}
export COMPOSE_FILE=${COMPOSE_FILE:-canary.yml}
export SID=${SID:-dynamic}
export ENVIRONMENT=${ENVIRONMENT:-canary}
TIMEOUT=90m

export RANCHER_CMD="rancher-compose -p ${STACK} -f $COMPOSE_FILE"

echo "Working on stack: ${STACK}"

echo "Stopping old installation..."
${RANCHER_CMD} stop --timeout 10

echo "Stopping requested, pausing to allow command to complete..."
sleep 40

echo "Clearing out old installation..."
${RANCHER_CMD} rm --force

echo "Clearing requested, pausing to allow command to complete..."
sleep 40

echo "Installing json service ${JSON_SERVICE_IMAGE}..."
echo "Installing settings ${SETTINGS_IMAGE}..."
echo "Installing avaloq ${ABS_IMAGE}..."
echo "Updating the stack..."
${RANCHER_CMD} up --upgrade -d --pull --confirm-upgrade

echo "TIMEOUT: " $TIMEOUT
: ${TIMEOUT=40m}
echo "TIMEOUT: " $TIMEOUT

sleep $TIMEOUT && echo "Process has taken too long ($TIMEOUT) script will be terminated" && kill -- -$$ &
TIMER=$!
echo "TIMER: " $TIMER
echo "Current PID: " $$
if [ -d "/proc/${TIMER}" ]; then echo "Process ${TIMER} is running"; else echo "Process ${TIMER} is not running"; fi

export ABS_DNS_NAME=${STACK}-abs-${SID}.service.consul

echo "ABS_DNS_NAME: " $ABS_DNS_NAME
echo "dig: " $(dig +noall +answer $ABS_DNS_NAME SRV )
echo "port old: " $(dig +noall +answer $ABS_DNS_NAME SRV | cut -d ' ' -f 6)
ABS_DIG_RESULT=$(dig +noall +answer $ABS_DNS_NAME SRV )
echo "ABS_DIG_RESULT: " $ABS_DIG_RESULT
ABS_STRING_ARRAY=($ABS_DIG_RESULT)
for i in "${ABS_STRING_ARRAY[@]}"
do
  :
  echo $i
done
ABS_PORT=${ABS_STRING_ARRAY[6]}
echo "abs port new: " $ABS_PORT
if [ -z $ABS_PORT ]; then
  echo "invalid port"
  exit 1
fi

until nc -z $ABS_DNS_NAME $ABS_PORT
do
  echo "Waiting for oracle ${ABS_DNS_NAME} ..."
  sleep 60
done
echo "Found oracle ${ABS_DNS_NAME} ..."

export NEXTGEN_DNS_NAME=${STACK}-nextgen.service.consul

echo "NEXTGEN_DNS_NAME: " $NEXTGEN_DNS_NAME
echo "dig: " $(dig +noall +answer $NEXTGEN_DNS_NAME SRV )
echo "port old: " $(dig +noall +answer $NEXTGEN_DNS_NAME SRV | cut -d ' ' -f 6)
NG_DIG_RESULT=$(dig +noall +answer $NEXTGEN_DNS_NAME SRV )
NG_STRING_ARRAY=($NG_DIG_RESULT)
for i in "${NG_STRING_ARRAY[@]}"
do
  :
  echo $i
done

NG_PORT=${NG_STRING_ARRAY[6]}

until nc -z $NEXTGEN_DNS_NAME $NG_PORT
do
  echo "Waiting for nextgen ${NEXTGEN_DNS_NAME} ..."
  sleep 60
done
echo "Found nextgen ${NEXTGEN_DNS_NAME} ..."

echo "TIMER: " $TIMER
if [ -d "/proc/${TIMER}" ]; then echo "Process ${TIMER} is running"; else echo "Process ${TIMER} is not running"; fi
# Kill the timer fork, and children of - or handle case where process doesn't exist
kill ${TIMER} $(pgrep -P $TIMER) || true

echo "# of children? $(pgrep -P $$ | wc -w)"
wait
echo "Children finished"

echo "I think we are ready..."

